# Documentation References:
# - TOML syntax:  https://toml.io/en/v1.0.0
# - Build system: https://peps.python.org/pep-0621/
# - Ruff:         https://docs.astral.sh/ruff/settings/
# - Pytest:       https://docs.pytest.org/en/stable/reference/reference.html#configuration-options
# - Pyright:      https://github.com/microsoft/pyright/blob/main/docs/configuration.md
#
# - UV:           https://docs.astral.sh/uv/configuration/files/
# 

# ━━━━━━━━━━━━━━━━━━━━━━━━━━ Build System ━━━━━━━━━━━━━━━━━━━━━━━━━━ #

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
packages = ["gf", "configs"]

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Project ━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

[project]
name = "gf"
version = "0.0.1"
description = "Tool for forecasting and tracking your university grades to adjust your priorities"
authors = [
    { name = "Gatlen Culp", email = "GatlenCulp@gmail.com" },
]
# 
license = { file = "LICENSE" }
# 

readme = { file = "README.md", content-type = "text/markdown" }

classifiers = [
    "Private :: Do Not Upload",
    "Programming Language :: Python :: 3",
    # 
    "License :: OSI Approved :: MIT License",
    # 
]

# ━━━━━━━━━━━━━━━━━━━━━━ Primary Dependencies ━━━━━━━━━━━━━━━━━━━━━━ #

requires-python = "~=3.12"

dependencies = [
    "loguru>=0.7.3", # Better logging
    "plotly>=5.24.1", # Interactive plotting
    "pydantic>=2.10.3", # Data validation
    "rich>=13.9.4", # Rich terminal output
    "numpy>=1.26.4", # Numerical computing
    "python-dotenv>=1.0.0", # Load .env into environment vars
    "typer>=0.15.1", # CLI builder"
    "tqdm>=4.67.1", #
    "matplotlib>=3.10.1",
]

[project.urls]
# PyPI project links
Repository = "https://github.com/GatlenCulp/grade-forecast"
Homepage = "https://GatlenCulp.github.io/grade-forecast/"
Documentation = "https://GatlenCulp.github.io/grade-forecast/"

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Scripts ━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

[project.scripts]
grade-forecast = "gf.cli.main:app"

# ━━━━━━━━━━━━━━━━━━━━━━━ Extra Dependencies ━━━━━━━━━━━━━━━━━━━━━━━ #

[dependency-groups]
ai-apps = [  # AI application development packages
    "ell-ai>=0.0.15",        # AI toolkit
    "langchain>=0.3.12",     # LLM application framework
    # "megaparse>=0.0.45",   # Advanced text parsing (TODO: Requires Python 3.10+)
]
ai-train = [  # Machine learning and model training packages
    "datasets>=3.1.0",         # Dataset handling
    "einops>=0.8.0",           # Tensor operations
    "jaxtyping>=0.2.36",       # Type hints for JAX
    "nnsight>=0.3.7",          # ML Interp and Manipulation
    "onnx>=1.17.0",            # ML model interoperability
    "pytorch-lightning>=2.4.0", # PyTorch training framework
    "ray[tune]>=2.40.0",       # Distributed computing
    "safetensors>=0.4.5",      # Safe tensor serialization
    "scikit-learn>=1.6.0",     # Traditional ML algorithms
    "shap>=0.46.0",            # Model explainability
    "torch>=2.5.1",            # Deep learning framework
    "transformers>=4.47.0",    # Transformer models
    "umap-learn>=0.5.7",       # Dimensionality reduction
    "wandb>=0.19.1",           # Experiment tracking
]
async = [  # Asynchronous programming
    "uvloop>=0.21.0",          # Fast event loop implementation
]
cli = [  # Command-line interface tools
    "typer>=0.15.1",           # CLI builder
]
cloud = [  # Cloud infrastructure tools
    # "ansible>=11.1.0",       # Infrastructure automation (TODO: Doesn't work for Python 3.10)
    "boto3>=1.35.81",          # AWS SDK
]
config = [  # Configuration management
    "cookiecutter>=2.6.0",     # Project templating
    "gin-config>=0.5.0",       # Config management
    "jinja2>=3.1.4",           # Template engine
]
data = [  # Data processing and storage
    "dagster>=1.9.5",          # Data orchestration
    "duckdb>=1.1.3",           # Embedded analytics database
    # "lancedb>=0.17.0",       # Vector database (TODO: Figure out install error)
    "networkx>=3.4.2",         # Graph operations
    "orjson>=3.10.12",         # Fast JSON parsing
    "pandera>=0.22.1",         # Typing dataframes
    "pillow>=10.4.0",          # Image processing
    "polars>=1.17.0",          # Fast dataframes
    # "pygwalker>=0.4.9.13",   # Data visualization (TODO: Figure out install error)
    "sqlmodel>=0.0.22",        # SQL ORM
    "tomli>=2.0.1",            # TOML parsing
]
dev = [  # Development tools
    "better-exceptions>=0.3.3", # Improved error messages
    "commitizen>=4.1.1",       # Standardized commit messages
    "cruft>=2.15.0",           # Project template management
    "faker>=33.1.0",           # Fake data generation
    "hypothesis>=6.122.3",     # Property-based testing
    "pip>=24.3.1",             # Package installer
    "polyfactory>=2.18.1",     # Test data factory
    "pre-commit>=4.1.0",       # Git pre-commit hooks
    "pyinstrument>=5.0.0",     # Profiler
    # "pyprojectsort>=0.3.0",  # pyproject.toml sorter (TODO: Find replacement)
    "pyright>=1.1.390",        # Static type checker
    "pytest>=8.3.4",           # Testing framework
    "pytest-cases>=3.8.6",     # Parametrized testing
    "pytest-cov>=6.0.0",       # Coverage reporting
    "pytest-icdiff>=0.9",      # Improved diffs
    "pytest-mock>=3.14.0",     # Mocking
    "pytest-playwright>=0.6.2", # Browser testing
    "pytest-profiling>=1.8.1", # Test profiling
    "pytest-random-order>=1.1.1", # Randomized test order
    "pytest-shutil>=1.8.1",    # File system testing
    "pytest-split>=0.10.0",    # Parallel testing
    "pytest-sugar>=1.0.0",     # Test progress visualization
    "pytest-timeout>=2.3.1",   # Test timeouts
    "ruff>=0.8.3",             # Fast Python linter
    # "taplo>=0.9.3",          # TOML toolkit (Requires Rust's Cargo)
    "tox>=4.23.2",             # Test automation
    "uv>=0.5.7",               # Fast pip replacement
]
dev-doc = [  # Documentation tools
    "mdformat>=0.7.19",        # Markdown formatter
    "mkdocs>=1.6.1",           # Documentation generator
    "mkdocs-material>=9.5.48", # Documentation theme
]
dev-nb = [  # Notebook development tools
    "jupyter-book>=1.0.3",     # Notebook publishing
    "nbformat>=5.10.4",        # Notebook file format
    "nbqa>=1.9.1",             # Notebook linting
    "testbook>=0.4.2",         # Notebook testing
]
gui = [  # Graphical interface tools
    "streamlit>=1.41.1",       # Web app framework
]
misc = [  # Miscellaneous utilities
    "boltons>=24.1.0",         # Python utilities
    "cachetools>=5.5.0",       # Caching utilities
    "wrapt>=1.17.0",           # Decorator utilities
]
nb = [  # Jupyter notebook tools
    "chime>=0.7.0",            # Sound notifications
    "ipykernel>=6.29.5",       # Jupyter kernel
    "ipython>=7.34.0",         # Interactive Python shell
    "ipywidgets>=8.1.5",       # Jupyter widgets
    "jupyterlab>=4.3.3",       # Notebook IDE
]
web = [  # Web development and scraping
    "beautifulsoup4>=4.12.3",  # HTML parsing
    "fastapi>=0.115.6",        # Web framework
    "playwright>=1.49.1",      # Browser automation
    "requests>=2.32.3",        # HTTP client
    "scrapy>=2.12.0",          # Web scraping
    "uvicorn>=0.33.0",         # ASGI server
    # "zrok>=0.4.42",          # Tunnel service (TODO: Requires 3.10+)
]

[tool.uv]
default-groups = [
    # "dev", "dev-doc", "nb",

    #

    #

    #
    # "dev-nb", "web",
    # 

    #

    #

    #
]

#

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Ruff ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

[tool.ruff]
cache-dir = ".cache/ruff"
# 
target-version = "py312"
# 
line-length = 100
format = { quote-style = "double", indent-style = "space" }

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "S101",  # Allow assert
    "E731",  # Allow lambdas
    "EM101", # Allow strings in exceptions
    "T201",  # Allow print
    "D103",  # Allow public functions w/o docstrings
    "D105",  # Allow undocumented magic methods
    "D107",  # Same as above
    "D205",  # Allow multi-line summary
    "D415",  # Less strict docstrings
    "COM812", # Allow single-line string concat (Conflicts with ISC001)
    "ISC001", # Allow single-line string concat (Conflicts with COM812)
    "TD002", # Allow user-less TODOs
    "TD003", # Allow issue-less TODOs
    "UP007", # Allow non-use of pipe for types
    "UP035", # Same as above
]

mccabe.max-complexity = 10
pycodestyle.max-doc-length = 99
pydocstyle.convention = "google"
isort = { known-first-party = ["gf", "configs"], force-sort-within-sections = true }

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = [
    "F401",  # Allow unused imports in __init__.py
]

"**/*.ipynb" = [
    "S101",  # Allow assert
    "E731",  # Allow lambdas
    "EM101", # Allow strings in exceptions
    "T201",  # Allow print
    "D103",  # Allow public functions w/o docstrings
    "D105",  # Allow undocumented magic methods
    "D107",  # Same as above
    "D205",  # Allow multi-line summary
    "D415",  # Less strict docstrings
    "TD002", # Allow user-less TODOs
    "TD003", # Allow issue-less TODOs
    "UP007", # Allow non-use of pipe for types
    "UP035", # Same as above
]

"tests/**/*.py" = [
    "S101",   # Allow assert
    "ARG001", # Allow unused function args for fixtures
    "FBT001", # Allow booleans as function params
    "PLR2004", # Allow magic values in comparisons
    "S311",   # Allow pseudo-random generators
    "ANN001", # Allow for non-typed functions
    "ANN201", # Allow for non-typed functions
    "RET503", # Allow for implicit ignores
]

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Pytest ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

[tool.pytest.ini_options]
testpaths = ["tests"]
log_file = "./logs/pytest.log"
addopts = """
--tb=long
--code-highlight=yes
"""

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Pyright ━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #

[tool.pyright]
include = [ "gf" ]
exclude = [
    "**/__pycache__",
    #
    ".venv",
    # 
]
